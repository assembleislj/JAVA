Hashtable
已经不推荐使用
线程安全
key的hash算法效率低于HashMap

HashMap
基于数组实现
线程不安全
hash冲突，通过链表来存放,最新版会在元素数量大于8后转换成红黑树以提高效率
扩容时效率低，需要适当的设置初始容量

LinkedHashMap
内部包装HashMap来实现
在HashMap功能基础上又增加了
1 记录插入顺序
2 或者记录访问顺序

TreeMap
根据key排序的Map
红黑树实现
工作方式
1 构造器传入比较器(Comparator)
2 key实现Comparable接口

TreeMap成员函数
subMap(startKey,endKey) 两个key之间的集合
headMap(Key) 小于key的集合
tailMap(key) 大于key的集合

WeakHashMap
弱引用Map
基于数组实现Entry<K,V>[] table，类似HashMap
保存到数组中的对象Entry继承于WeakReference，这是个弱引用对象
Entry的构造函数中调用了WeakReference(key, queue)，用意在于
queue很特殊，他是一个ReferenceQueue，当gc回收了这个对象会把这个对象放入这个队列中，
我们访问这个队列也就知道了有那些Entry被系统回收，也就有机会删除我们table数组内的无效Entry对象了

Collections.synchronizedMap(Map)
把一个非线程安全的Map类包装成线程安全的

ConcurrentHashMap
针对高并发设计的Map,将数据拆分成多个段，每个段对应一个HashMap
get无锁
put的锁粒度小于同步的HashMap
整体性能优于同步的HashMap
size() 需要把所有段加锁，然后统计加和，效率低于同步的HashMap
